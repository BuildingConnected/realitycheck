version: 2

resource_job_defaults: &resource_job_defaults
  docker:  [{image: 'circleci/ruby:2.4.1'}]
  steps:
    - run:
        name: verify that job ran with the requested resource_class option
        command: |
          if ![curl -k \
          "$CIRCLE_HOSTNAME/api/v1.1/project/github/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME/$CIRCLE_BUILD_NUM?\
          circle-token=$CIRCLE_TOKEN" | \
          jq '.picard.resource_class.class' | grep $CIRCLE_JOB]
          then 
            echo "The resource class check was successful."

    - run: 
        - when: on_fail
        - command: | 
          echo "Please check that all environment variables such as CIRCLE_HOSTNAME and CIRCLE_TOKEN are set at https://circleci.com/gh/$CIRCLE_PROJECT_REPONAME/realitycheck/edit#env-vars."

remote_docker_defaults: &remote_docker_defaults
  docker: [{image: 'docker:17.06-git'}]

basic_docker_build: &basic_docker_build
  name: "Build a really basic docker image"
  command: |
    dockerfile=Dockerfile
    echo "FROM alpine:latest" > $dockerfile
    echo "RUN echo hello" >> $dockerfile
    docker build -f $dockerfile --tag throwaway:$CIRCLE_BUILD_NUM .
    docker run --rm throwaway:$CIRCLE_BUILD_NUM

contexts_defaults: &contexts_defaults
  docker: [{image: 'alpine:latest'}]
  working_directory: /a/contexts/test

workspaces_defaults: &workspaces_defaults
  docker: [{image: 'circleci/node:latest'}]
  working_directory: ~/foo/bar

jobs:
  # check requirements 
  hostname: 
    run: 
      - command: | 
      # check if the hostname is not empty and 
          echo $CIRCLE_HOSTNAME
    run: 
      - when: on_fail

  # resource class jobs
  small: # 1 vCPU, 2GB RAM
    <<: *resource_job_defaults
    resource_class: small

  medium: # 2 vCPUs, 4GB RAM
    <<: *resource_job_defaults
    resource_class: medium

  medium+: # 3 vCPUs, 6GB RAM
    <<: *resource_job_defaults
    resource_class: medium+

  large: # 4 vCPUs, 8GB RAM
    <<: *resource_job_defaults
    resource_class: large

  xlarge: # 8 vCPUs, 16GB RAM
    <<: *resource_job_defaults
    resource_class: xlarge

  # vm jobs
  machine:
    machine: true
    steps:
      - run: |
          echo $SLEEP
          date
          sleep $SLEEP
          date
          echo 'Done sleeping.'
    environment:
      SLEEP: 1

  remote_docker:
    <<: *remote_docker_defaults
    steps:
      - run: which docker
      - run: docker -v
      - setup_remote_docker
      - run:
          <<: *basic_docker_build
      - run: docker version
      - run:
          name: Error Message
          command: echo 'setup_remote_docker has failed. Please confirm VM Provider settings in Management Console Dashboard.'
          when: on_fail

  docker_layer_caching:
    <<: *remote_docker_defaults
    steps:
      - run: which docker
      - run: docker -v
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          <<: *basic_docker_build
      - run: docker version
      - run:
          name: Error Message
          command: echo 'docker_layer_caching has failed. Please confirm VM Provider settings in Management Console Dashboard.'
          when: on_fail

  machine_dlc:
    machine:
      docker_layer_caching: true
    steps:
      - run: which docker
      - run: docker -v
      - run:
          <<: *basic_docker_build
      - run: docker version
      - run:
          name: Error Message
          command: echo 'docker_layer_caching on machine executer has failed. Please confirm VM Provider settings in Management Console Dashboard.'
          when: on_fail

  # feature jobs
  contexts:
    <<: *contexts_defaults
    steps:
      - run:
          name: Test Contexts functionality
          command: |
              if [ -n $(env | grep CONTEXT_END_TO_END_TEST_VAR) ]; then
                echo "All systems nominal"
                exit 0 
              else 
                echo "CONTEXT_END_TO_END_TEST_VAR does not seem to exist. Please confirm that it does, and contact your account team if you're still experiencing issues"
                exit 1
              fi

  multi-contexts:
    <<: *contexts_defaults
    steps:
      - run:
          name: Test Multiple Contexts functionality
          command: |
              if [ -n $(env | grep MULTI_CONTEXT_END_TO_END_VAR) ]; then
                echo "All systems nominal"
                exit 0 
              else 
                echo "MULTI_END_TO_END_TEST_VAR does not seem to exist. Please confirm that it does, and contact your account team if you're still experiencing issues"
                exit 1
              fi

  write_workspace:
    <<: *workspaces_defaults
    steps:
      - run:
          name: Create workspace directory
          command: mkdir -p stuff
      - run:
          name: Create workspace file
          command: echo 5 > ./stuff/thing
      - persist_to_workspace:
          root: .
          paths:
            - stuff

  read_workspace:
    <<: *workspaces_defaults
    steps:
      - attach_workspace:
           at: ./attached
      - run: |
          if [[ $(< ./attached/stuff/thing) != '5' ]]; then
            echo 'Sadness, the value is not what we expected, so the workspace write/read did not work'
            exit 1
          else
            echo 'Yay, value matches'
            exit 0
          fi

  save_and_restore_cache:
    docker:
      - image: circleci/python
    working_directory: ~/realitycheck
    steps:
      - checkout

      - run:
          name: Create dir to be cached
          command: mkdir -p stuff
      - run:
          name: Create cache file
          command: echo 5 >./stuff/thing

      - save_cache:
          key: v3-file-cache-{{ .BuildNum }}
          paths:
            - ./stuff/thing

      - run:
          name: Delete cache folder
          command: rm -rf ./stuff/thing
      - run:
          name: Sleep to prevent race conditionn
          command: sleep 5

      - restore_cache:
            keys:
              - v3-file-cache-{{ .BuildNum }}

      - run:
          name: Verify cache population
          command: |
            if [[ $(< stuff/thing) != '5' ]]; then
              exit 1
            else
              echo "The cache was populated"
            fi

  artifacts_test_results:
    docker:
      - image: python:3.6.0
    working_directory: ~/realitycheck
    steps:
      - checkout

      - run:
          name: Creating Dummy Artifacts
          command: |
            echo "my artifact file" > /tmp/artifact-1.txt;
            mkdir /tmp/artifacts;
            echo "my artifact files in a dir" > /tmp/artifacts/artifact-2.txt;

      - store_artifacts:
          path: /tmp/artifact-1.txt
          destination: artifact-file.txt

      - store_artifacts:
          path: /tmp/artifacts

      - store_test_results:
          path: test-results

workflows:
  version: 2
  resource_class_jobs:
    jobs:
      - small
      - medium
      - medium+
      - large
      - xlarge

  vm_jobs:
    jobs:
      - machine
      - remote_docker:
          requires:
            - machine
      - docker_layer_caching:
          requires:
            - machine
      - machine_dlc:
          requires:
            - machine

  feature_jobs:
    jobs:
      - save_and_restore_cache
      - contexts:
          context: org-global
      - multi-contexts:
          context: individual-local
      - write_workspace
      - read_workspace:
          requires:
            - write_workspace
      - artifacts_test_results 